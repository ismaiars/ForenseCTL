[tool.poetry]
name = "forensectl"
version = "0.1.0"
description = "Herramienta profesional de an√°lisis forense digital automatizado"
authors = ["ForenseCTL Team <forensectl@example.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/tu-org/forensectl"
repository = "https://github.com/tu-org/forensectl"
documentation = "https://forensectl.readthedocs.io"
keywords = ["forensics", "digital-forensics", "incident-response", "dfir", "blue-team"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: System :: Systems Administration",
    "Topic :: Scientific/Engineering :: Information Analysis"
]
packages = [{include = "forensectl"}]

[tool.poetry.dependencies]
python = "^3.12"
click = "^8.1.7"
rich = "^13.7.0"
typer = "^0.9.0"
pydantic = "^2.5.0"
jinja2 = "^3.1.2"
pyyaml = "^6.0.1"
requests = "^2.31.0"
psutil = "^5.9.6"
hashlib-compat = "^1.0.1"
pandas = "^2.1.4"
numpy = "^1.26.2"
dfvfs = "^20231007"
plaso = "^20231120"
yara-python = "^4.5.0"
volatility3 = "^2.5.2"
pytsk3 = "^20231007"
bulk-extractor = {version = "^2.0.0", optional = true}
minisign = "^0.1.0"
cryptography = "^41.0.7"
sqlalchemy = "^2.0.23"
alembic = "^1.13.1"
celery = {version = "^5.3.4", optional = true}
redis = {version = "^5.0.1", optional = true}
boto3 = {version = "^1.34.0", optional = true}
azure-storage-blob = {version = "^12.19.0", optional = true}
google-cloud-storage = {version = "^2.10.0", optional = true}

[tool.poetry.extras]
cloud = ["boto3", "azure-storage-blob", "google-cloud-storage"]
queue = ["celery", "redis"]
bulk = ["bulk-extractor"]
all = ["boto3", "azure-storage-blob", "google-cloud-storage", "celery", "redis", "bulk-extractor"]

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-asyncio = "^0.21.1"
black = "^23.11.0"
ruff = "^0.1.6"
isort = "^5.12.0"
mypy = "^1.7.1"
pre-commit = "^3.6.0"
pip-audit = "^2.6.1"
safety = "^2.3.5"
bandit = "^1.7.5"
mkdocs = "^1.5.3"
mkdocs-material = "^9.4.8"
mkdocs-mermaid2-plugin = "^1.1.1"
jupyter = "^1.0.0"
ipykernel = "^6.27.1"
factory-boy = "^3.3.0"
faker = "^20.1.0"

[tool.poetry.scripts]
forensectl = "forensectl.cli:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "ISC001", # conflicts with formatter
]
line-length = 88
target-version = "py312"

[tool.ruff.per-file-ignores]
"tests/**/*" = ["T20", "ARG001"]
"scripts/**/*" = ["T20"]

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m "not slow"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "requires_docker: marks tests that require Docker",
    "requires_root: marks tests that require root privileges",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["forensectl", "modules"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B601"]