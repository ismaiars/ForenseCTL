{
  "title": "Forense-Automatizado-BlueTeam — Generador de Repositorio",
  "language": "es",
  "purpose": "Generar un repositorio Git profesional y listo para producción que automatice la adquisición, preservación, análisis y reporte de evidencias digitales (endpoint, memoria, disco, logs, nube) con cadena de custodia, buenas prácticas y CI/CD.",
  "high_level_goals": [
    "Automatizar el ciclo forense: adquisición → preservación → análisis → timeline → reporte.",
    "Mantener integridad con hashing, evidencia inmutable y cadena de custodia documentada.",
    "Soportar Windows, Linux y (opcional) macOS con perfiles de artefactos preconfigurados.",
    "Entregar reportes ejecutivos y técnicos reproducibles (Markdown → PDF/HTML)."
  ],
  "deliverables": {
    "repo_structure": "Estructura de carpetas modular y documentada.",
    "tooling": "Contenedores y scripts para Volatility3, The Sleuth Kit, Autopsy (headless), plaso/log2timeline, bulk_extractor, YARA, tzutil, RegRipper (o rip.pl), leechcore opcional.",
    "automation": "CLI en Python y orquestación por Makefile/Invoke/Poetry; docker-compose para laboratorio y runners.",
    "playbooks": "SOPs y playbooks para diferentes escenarios (malware, exfiltración, phishing, ransomware).",
    "reporting": "Plantillas de reporte técnico y ejecutivo; exportación a PDF.",
    "testing": "Datos sintéticos, fixtures y pruebas automatizadas (pytest) que validen integridad, parsers y pipelines.",
    "ci_cd": "GitHub Actions con linting, tests, escaneo de secretos e imágenes, build y publicación de artefactos.",
    "compliance": "Políticas de manejo de PII, retención y eliminación segura (shred/srm), trazabilidad y permisos mínimos."
  },
  "target_audience": "Blue Teamers, DFIR, MSSP y administradores que necesiten respuesta a incidentes y análisis forense reproducible.",
  "non_goals": [
    "No incluir herramientas proprietarias de pago.",
    "No ejecutar adquisición en hosts sin autorización y fuera de entornos legales controlados."
  ],
  "recommended_stack": {
    "languages": ["Python 3.12 (Poetry)", "Bash/PowerShell"],
    "core_tools": [
      "Volatility3 (memoria)",
      "The Sleuth Kit (tsk_recover, fls, mmls, icat)",
      "Autopsy (headless, opcional)",
      "plaso/log2timeline + psort",
      "bulk_extractor",
      "YARA",
      "RegRipper/rip.pl",
      "hashdeep/sha256sum",
      "dfvfs (Digital Forensics Virtual File System)"
    ],
    "containers": ["Docker + docker-compose", "Opcional: Podman/K8s para escala"],
    "storage": ["Repo de evidencia (WORM-like) sobre S3/MinIO opcional", "sqlite/postgres para metadatos (opcional)"],
    "docs": ["MkDocs o Docusaurus", "Mermaid para diagramas"],
    "reporting": ["Jinja2 → Markdown → Pandoc PDF/HTML", "Jupyter Notebooks opcional para anexos"]
  },
  "architecture_summary": {
    "modules": [
      "adquisicion: Colección (lógica/bit-a-bit) + validación de integridad",
      "preservacion: Hashing, cadena de custodia, almacenamiento con metadatos",
      "analisis_memoria: Volatility3 plugins y perfiles predefinidos",
      "analisis_disco: TSK/Autopsy, extracción de artefactos y carving",
      "artefactos_endpoint: Windows (SRUM, AmCache, ShimCache, Registry, Prefetch, EVTX, Browser), Linux (journald, bash_history, auth.log), macOS (Unified Logs, FSEvents)",
      "timeline: log2timeline/plaso y correlación psort",
      "yara_scanner: reglas YARA sobre memoria/disco/artefactos",
      "cloud_forensics: perfiles básicos para AWS/GCP/Azure logs (CloudTrail, VPC Flow, GCP Audit, Azure Activity)",
      "reportes: plantillas, anexos y evidencia visual",
      "orquestacion: CLI central (forensectl) + jobs",
      "retencion_y_borrado: políticas, wiping seguro y archivado"
    ],
    "seguridad": [
      "TLS en tránsito, cifrado opcional en repositorio de evidencias",
      "Roles mínimos (RBAC) para ejecución de módulos",
      "Escaneo de contenedores e IaC en CI",
      "No secrets en repo: SOPS/age o Vault"
    ],
    "escalabilidad": "Ejecuciones en paralelo por caso, colas (RQ/Celery, opcional), separación de artefactos grandes."
  },
  "repo_root_structure": {
    "README.md": "Resumen, badges, quickstart y alcance legal.",
    "LICENSE": "MIT o Apache-2.0",
    "docs/": "Arquitectura, SOPs, playbooks, guías legales, diagramas",
    "forensectl/": "Código fuente del CLI en Python (paquete)",
    "modules/": {
      "adquisicion/": "Colectores, hash y verificación",
      "preservacion/": "Cadena de custodia y almacenamiento",
      "analisis_memoria/": "Volatility3 wrappers y perfiles",
      "analisis_disco/": "TSK/Autopsy wrappers",
      "artefactos_endpoint/": "Windows/Linux/macOS parsers",
      "timeline/": "plaso, psort y correlación",
      "yara_scanner/": "Reglas y ejecutor",
      "cloud_forensics/": "Parsers logs cloud",
      "reportes/": "Plantillas, builders y export",
      "retencion/": "Borrado seguro y archivado"
    },
    "rules/": { "yara/": "Reglas base y ejemplos" },
    "dashboards/": "Opcional: Grafana/HTML summary",
    "data/": { "samples/": "Imágenes/artefactos sintéticos", "fixtures/": "Pequeños para tests" },
    "scripts/": "Utilidades (generar datasets, montar imágenes, etc.)",
    "docker/": "Dockerfiles y docker-compose.yml",
    "infra/": "Opcional IaC (Terraform/Ansible) para laboratorio",
    "tests/": "pytest con mocks y pruebas de pipelines",
    ".github/": "workflows CI, issue/PR templates",
    "CONTRIBUTING.md": "Guía de contribución",
    "SECURITY.md": "Política de reportes",
    "CODE_OF_CONDUCT.md": "Conducta",
    "CHANGELOG.md": "Historial"
  },
  "detailed_requirements": {
    "soporte_os": "Windows (adquisición con PS y live response), Linux (bash), macOS (opcional). Análisis se ejecuta en contenedor Linux.",
    "prerrequisitos": "Python 3.12 + Poetry, Docker, make, 16GB RAM recomendado para análisis grandes.",
    "integridad": "SHA-256 y SHA-512 para cada artefacto. Manifiestos JSON con hashes, tamaño, fechas y responsable.",
    "nomenclatura_casos": "CASE-YYYYMMDD-ORG-INCIDENT",
    "metadatos_obligatorios": ["case_id", "examiner", "host", "os", "tz", "source_path", "hashes", "tool_versions", "chain_of_custody_entries"]
  },
  "security_best_practices": [
    "Cadena de custodia con firmas (firma digital opcional con minisign/age).",
    "Ejecución con mínimos privilegios; no root containers.",
    "Aislar evidencia (montajes read-only, loop devices RO).",
    "Bloqueo de escritura (write blockers) en adquisición bit-a-bit cuando aplique.",
    "Separación de llaves y secretos (Vault/SOPS).",
    "Escaneo de imágenes con Trivy y de dependencias con pip-audit.",
    "PII: enmascarar/anonimizar en reportes públicos; control de acceso."
  ],
  "logging_and_schema": {
    "estandar": "JSONL con esquema propio y evento ECS-like para interoperabilidad.",
    "campos": ["@timestamp", "case_id", "host", "module", "action", "status", "hash.sha256", "size", "path", "notes"],
    "retencion": "30-90 días de trabajo, artefactos críticos archivados (WORM) según política.",
    "timezones": "Normalizar a UTC, conservar zona original en metadatos."
  },
  "cli_spec": {
    "nombre": "forensectl",
    "comandos": [
      "init-case",
      "acquire --profile <windows|linux|mac> --scope <live|image> --target <host|device|image>",
      "verify --path <artefacto|imagen>",
      "analyze memory|disk|artefactos --profile <perfil> --inputs <ruta(s)>",
      "timeline build|export --inputs <artefactos|evtx|plaso> --format <csv|jsonl>",
      "yara scan --rules rules/yara --inputs <ruta>",
      "report build --case <id> --template <tecnico|ejecutivo>",
      "retention archive|purge --case <id>",
      "chain add-entry --case <id> --note <texto>"
    ],
    "salidas": "Directorio por caso con /evidence, /analysis, /reports, /manifests y /chain"
  },
  "artefacts_profiles": {
    "windows": [
      "Registro (SAM, SYSTEM, SOFTWARE, NTUSER.DAT, UsrClass.dat)",
      "EVTX (Security, System, Application, PowerShell, WMI)",
      "Prefetch, AmCache, ShimCache, SRUM",
      "Navegadores (Chromium/Firefox) historial y downloads",
      "Puntos de restauración/sombra (si aplica)"
    ],
    "linux": [
      "/var/log (auth, syslog, secure, journal export)",
      "~/.bash_history y shells",
      "cron, ssh (authorized_keys, known_hosts), sudo logs",
      "services, packages, network (ss, iptables/nftables)"
    ],
    "macos_opcional": [
      "Unified Logs, FSEvents",
      "LaunchAgents/Daemons",
      "Quarantine events, TCC"
    ],
    "nube_basico": [
      "AWS CloudTrail, VPC Flow Logs",
      "GCP Audit Logs",
      "Azure Activity Logs"
    ]
  },
  "timeline_pipeline": {
    "ingesta": "log2timeline (plaso) desde imágenes/artefactos",
    "correlacion": "psort con filtros (usuario, host, rango temporal, IOC)",
    "export": "CSV/JSONL + gráficos sumarios (opcional)",
    "validacion": "Checks automáticos de gaps y TZ"
  },
  "reporting": {
    "plantillas": [
      "tecnico.md.j2 (detalles, hashes, comandos, hallazgos, IOC, anexos)",
      "ejecutivo.md.j2 (resumen, impacto, línea de tiempo, recomendaciones, MTTR/MTTD)"
    ],
    "generacion": "Markdown → Pandoc → PDF/HTML",
    "anexos": ["hash manifests", "capturas de pantalla (redactadas)", "tablas CSV"]
  },
  "testing_and_validation": {
    "datasets_sinteticos": "Generador que simule malware (PowerShell encoded, LOLBins), brute force, navegación y logs.",
    "unit_tests": "Parsers de artefactos y normalizadores.",
    "integration_tests": "Pipelines end-to-end con imágenes pequeñas.",
    "verificacion_integridad": "Hashes antes y después de cada paso.",
    "reproducibilidad": "Lockfiles, versiones fijas y contenedores inmutables."
  },
  "ci_cd_and_devops": {
    "pipelines": [
      "Lint (ruff/black/isort) + pip-audit",
      "Tests (pytest) + cobertura",
      "Build de contenedores + Trivy",
      "Publicación de imágenes (GHCR) y release con changelog",
      "Artefactos: PDFs de ejemplo, reportes y manifest.json del caso demo"
    ],
    "versionado": "SemVer + Conventional Commits",
    "release": "Tags vX.Y.Z y changelog automatizado"
  },
  "git_and_contribution_practices": {
    "branching": "main, develop, feature/*, fix/*",
    "commit_convention": "Conventional Commits",
    "pr_templates": "Checklist de seguridad (no secrets), pruebas pasando y docs actualizadas",
    "issue_templates": ["bug_report.md", "feature_request.md", "incident_template.md"]
  },
  "legal_and_compliance_considerations": [
    "Autorización explícita para adquisición y análisis.",
    "Protección de PII y datos sensibles (enmascarado en reportes públicos).",
    "Conservación según políticas y jurisdicción.",
    "Cláusulas de limitación de responsabilidad en el README.",
    "Uso de write blockers y evidencia RO cuando aplique."
  }
  "milestones_and_timeline": {
    { "m1": "PoC docker-compose + CLI básico (1-2 semanas)" },
    { "m2": "Pipelines memoria (Volatility3) y timeline (plaso) (1-2 semanas)" },
    { "m3": "Artefactos Windows/Linux + reportes PDF (2 semanas)" },
    { "m4": "Cadena de custodia, retención y CI/CD completo (2 semanas)" },
    { "m5": "Cloud forensics básico + hardening + documentación (2-3 semanas)" }
  ],
  "qa_checks_before_release": [
    "Escaneo de secretos (gitleaks/trufflehog) limpio",
    "Revisión de licencias y atribuciones",
    "Reproducibilidad validada en runner limpio",
    "Docs con diagramas y ejemplos ejecutables",
    "Evidencias demo con hashes publicados"
  ],
  "examples_to_generate_in_repo": {
    "docker_compose": true,
    "Dockerfiles": true,
    "poetry_project": true,
    "forensectl_cli": true,
    "volatility_wrappers": true,
    "tsk_wrappers": true,
    "plaso_pipeline": true,
    "yara_rules_examples": true,
    "windows_linux_artifact_parsers": true,
    "report_templates": true,
    "sample_case_dataset": true,
    "tests_end_to_end": true,
    "github_actions_ci": true,
    "mkdocs_site": true
  },
  "instructions_for_the_AIGENERATOR": {
    "tone": "Técnico, claro y profesional en español.",
    "output_format": "Crear la estructura completa del repositorio con archivos reales, .env.example, scripts funcionales y datos sintéticos.",
    "code_quality_requirements": "Comentarios claros, tipado gradual en Python, linters configurados, logs estructurados y manejo de errores.",
    "security": "No incluir secretos reales. Proveer ejemplos con SOPS/age y variables ejemplo.",
    "dev_experience": "Makefile con comandos: make setup, make test, make demo, make report.",
    "commands_demo": [
      "poetry install && poetry run forensectl init-case --case CASE-20250812-DEMO",
      "docker compose up -d",
      "poetry run forensectl acquire --profile windows --scope image --target data/samples/win10-small.E01",
      "poetry run forensectl analyze memory --inputs data/samples/memdump.raw",
      "poetry run forensectl timeline build --inputs data/samples/artefactos --format jsonl",
      "poetry run forensectl report build --case CASE-20250812-DEMO --template ejecutivo"
    ],
    "limit": "Si excede tamaño, priorizar código del CLI, pipelines (memoria, timeline) y plantillas de reporte; el resto como esqueleto con TODOs."
  },
  "final_notes": "Añadir en docs/ una guía de 'Cómo presentar en portafolio' con: (1) video corto mostrando CLI, timeline y reporte, (2) métricas de impacto (tiempo de adquisición, volumen procesado, MTTR), (3) recomendaciones para ofrecerlo como servicio profesional (SLA, precios, límites)."
}
