"""Comandos CLI para an√°lisis forense."""

from pathlib import Path
from typing import Optional, List

import typer
from rich.console import Console
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TimeElapsedColumn
from rich.table import Table
from rich import print as rprint

from forensectl import logger
from forensectl.core.case_manager import CaseManager
from forensectl.analysis import MemoryAnalyzer, DiskAnalyzer, ArtifactExtractor

console = Console()

# Crear aplicaci√≥n Typer para comandos de an√°lisis
app = typer.Typer(
    name="analyze",
    help="üß† Comandos para an√°lisis forense",
    no_args_is_help=True
)


@app.command("memory")
def analyze_memory(
    case_id: str = typer.Option(..., "--case", "-c", help="ID del caso"),
    evidence_id: Optional[str] = typer.Option(None, "--evidence", "-e", help="ID de evidencia espec√≠fica"),
    profile: Optional[str] = typer.Option(None, "--profile", "-p", help="Perfil de Volatility (auto-detectar si no se especifica)"),
    plugins: Optional[List[str]] = typer.Option(None, "--plugin", help="Plugins espec√≠ficos a ejecutar"),
    output_format: str = typer.Option("json", "--format", "-f", help="Formato de salida (json/csv/text)"),
    save_results: bool = typer.Option(True, "--save/--no-save", help="Guardar resultados en el caso"),
    work_dir: Optional[Path] = typer.Option(None, "--work-dir", "-w", help="Directorio de trabajo")
) -> None:
    """üß† Analizar dumps de memoria con Volatility.
    
    Ejecuta an√°lisis de memoria usando Volatility3 sobre dumps de memoria
    adquiridos previamente.
    
    Ejemplos:
        forensectl analyze memory --case CASE-001
        forensectl analyze memory -c CASE-001 -e EVIDENCE-001 --plugin pslist --plugin netstat
    """
    try:
        # Inicializar managers
        case_manager = CaseManager(work_dir=work_dir) if work_dir else CaseManager()
        
        if not case_manager.case_exists(case_id):
            rprint(f"[red]‚ùå Caso {case_id} no encontrado[/red]")
            raise typer.Exit(1)
        
        memory_analyzer = MemoryAnalyzer(case_id, case_manager=case_manager)
        
        rprint(f"[blue]üß† Analizando memoria para caso: {case_id}[/blue]")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            TimeElapsedColumn(),
            console=console
        ) as progress:
            
            # Tarea de an√°lisis
            analysis_task = progress.add_task("Ejecutando an√°lisis de memoria...", total=100)
            
            # Ejecutar an√°lisis
            results = memory_analyzer.analyze(
                evidence_id=evidence_id,
                profile=profile,
                plugins=plugins,
                output_format=output_format,
                progress_callback=lambda p: progress.update(analysis_task, completed=p)
            )
            
            progress.update(analysis_task, completed=100)
            
            # Guardar resultados si se solicita
            if save_results:
                save_task = progress.add_task("Guardando resultados...", total=100)
                
                memory_analyzer.save_results(results)
                
                progress.update(save_task, completed=100)
        
        # Mostrar resumen
        rprint(f"[green]‚úÖ An√°lisis de memoria completado[/green]")
        
        summary_table = Table(title="Resumen de An√°lisis de Memoria")
        summary_table.add_column("M√©trica", style="cyan")
        summary_table.add_column("Valor", style="white")
        
        summary_table.add_row("Evidencias Analizadas", str(len(results.get("evidences", []))))
        summary_table.add_row("Plugins Ejecutados", str(len(results.get("plugins", []))))
        summary_table.add_row("Procesos Encontrados", str(results.get("process_count", 0)))
        summary_table.add_row("Conexiones de Red", str(results.get("network_connections", 0)))
        summary_table.add_row("Archivos Abiertos", str(results.get("open_files", 0)))
        summary_table.add_row("M√≥dulos Cargados", str(results.get("loaded_modules", 0)))
        summary_table.add_row("Formato de Salida", output_format.upper())
        summary_table.add_row("Resultados Guardados", "‚úÖ S√≠" if save_results else "‚ùå No")
        
        console.print(summary_table)
        
        # Mostrar hallazgos importantes
        if results.get("suspicious_processes"):
            rprint("\n[bold red]üö® Procesos Sospechosos Detectados:[/bold red]")
            for process in results["suspicious_processes"][:5]:  # Mostrar solo los primeros 5
                rprint(f"  ‚Ä¢ PID {process['pid']}: {process['name']} - {process['reason']}")
        
        if results.get("malware_indicators"):
            rprint("\n[bold yellow]‚ö†Ô∏è Indicadores de Malware:[/bold yellow]")
            for indicator in results["malware_indicators"][:5]:
                rprint(f"  ‚Ä¢ {indicator['type']}: {indicator['value']}")
        
    except Exception as e:
        logger.error(f"Error analizando memoria: {e}")
        rprint(f"[red]‚ùå Error: {e}[/red]")
        raise typer.Exit(1)


@app.command("disk")
def analyze_disk(
    case_id: str = typer.Option(..., "--case", "-c", help="ID del caso"),
    evidence_id: Optional[str] = typer.Option(None, "--evidence", "-e", help="ID de evidencia espec√≠fica"),
    analysis_type: str = typer.Option("full", "--type", "-t", help="Tipo de an√°lisis (full/quick/custom)"),
    file_systems: Optional[List[str]] = typer.Option(None, "--filesystem", help="Sistemas de archivos espec√≠ficos"),
    include_deleted: bool = typer.Option(True, "--deleted/--no-deleted", help="Incluir archivos eliminados"),
    include_slack: bool = typer.Option(False, "--slack/--no-slack", help="Incluir an√°lisis de slack space"),
    output_format: str = typer.Option("json", "--format", "-f", help="Formato de salida (json/csv/text)"),
    save_results: bool = typer.Option(True, "--save/--no-save", help="Guardar resultados en el caso"),
    work_dir: Optional[Path] = typer.Option(None, "--work-dir", "-w", help="Directorio de trabajo")
) -> None:
    """üíæ Analizar im√°genes de disco con The Sleuth Kit.
    
    Ejecuta an√°lisis forense de sistemas de archivos sobre im√°genes de disco
    adquiridas previamente.
    
    Ejemplos:
        forensectl analyze disk --case CASE-001
        forensectl analyze disk -c CASE-001 -e EVIDENCE-001 --type quick
    """
    try:
        # Inicializar managers
        case_manager = CaseManager(work_dir=work_dir) if work_dir else CaseManager()
        
        if not case_manager.case_exists(case_id):
            rprint(f"[red]‚ùå Caso {case_id} no encontrado[/red]")
            raise typer.Exit(1)
        
        disk_analyzer = DiskAnalyzer(case_id, case_manager=case_manager)
        
        rprint(f"[blue]üíæ Analizando disco para caso: {case_id}[/blue]")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            TimeElapsedColumn(),
            console=console
        ) as progress:
            
            # Tarea de an√°lisis
            analysis_task = progress.add_task("Ejecutando an√°lisis de disco...", total=100)
            
            # Ejecutar an√°lisis
            results = disk_analyzer.analyze(
                evidence_id=evidence_id,
                analysis_type=analysis_type,
                file_systems=file_systems,
                include_deleted=include_deleted,
                include_slack=include_slack,
                output_format=output_format,
                progress_callback=lambda p: progress.update(analysis_task, completed=p)
            )
            
            progress.update(analysis_task, completed=100)
            
            # Guardar resultados si se solicita
            if save_results:
                save_task = progress.add_task("Guardando resultados...", total=100)
                
                disk_analyzer.save_results(results)
                
                progress.update(save_task, completed=100)
        
        # Mostrar resumen
        rprint(f"[green]‚úÖ An√°lisis de disco completado[/green]")
        
        summary_table = Table(title="Resumen de An√°lisis de Disco")
        summary_table.add_column("M√©trica", style="cyan")
        summary_table.add_column("Valor", style="white")
        
        summary_table.add_row("Evidencias Analizadas", str(len(results.get("evidences", []))))
        summary_table.add_row("Sistemas de Archivos", str(len(results.get("filesystems", []))))
        summary_table.add_row("Archivos Encontrados", str(results.get("files_count", 0)))
        summary_table.add_row("Archivos Eliminados", str(results.get("deleted_files", 0)))
        summary_table.add_row("Directorios", str(results.get("directories_count", 0)))
        summary_table.add_row("Tama√±o Total", f"{results.get('total_size', 0):,} bytes")
        summary_table.add_row("Tipo de An√°lisis", analysis_type.title())
        summary_table.add_row("Formato de Salida", output_format.upper())
        summary_table.add_row("Resultados Guardados", "‚úÖ S√≠" if save_results else "‚ùå No")
        
        console.print(summary_table)
        
        # Mostrar hallazgos importantes
        if results.get("suspicious_files"):
            rprint("\n[bold red]üö® Archivos Sospechosos Detectados:[/bold red]")
            for file_info in results["suspicious_files"][:5]:
                rprint(f"  ‚Ä¢ {file_info['path']} - {file_info['reason']}")
        
        if results.get("hidden_files"):
            rprint("\n[bold yellow]üëÅÔ∏è Archivos Ocultos Encontrados:[/bold yellow]")
            for file_info in results["hidden_files"][:5]:
                rprint(f"  ‚Ä¢ {file_info['path']} ({file_info['size']} bytes)")
        
    except Exception as e:
        logger.error(f"Error analizando disco: {e}")
        rprint(f"[red]‚ùå Error: {e}[/red]")
        raise typer.Exit(1)


@app.command("artifacts")
def extract_artifacts(
    case_id: str = typer.Option(..., "--case", "-c", help="ID del caso"),
    evidence_id: Optional[str] = typer.Option(None, "--evidence", "-e", help="ID de evidencia espec√≠fica"),
    artifact_types: Optional[List[str]] = typer.Option(None, "--type", help="Tipos de artefactos espec√≠ficos"),
    os_type: Optional[str] = typer.Option(None, "--os", help="Tipo de SO (windows/linux/macos)"),
    include_registry: bool = typer.Option(True, "--registry/--no-registry", help="Incluir an√°lisis de registro (Windows)"),
    include_logs: bool = typer.Option(True, "--logs/--no-logs", help="Incluir logs del sistema"),
    include_browser: bool = typer.Option(True, "--browser/--no-browser", help="Incluir artefactos de navegador"),
    output_format: str = typer.Option("json", "--format", "-f", help="Formato de salida (json/csv/text)"),
    save_results: bool = typer.Option(True, "--save/--no-save", help="Guardar resultados en el caso"),
    work_dir: Optional[Path] = typer.Option(None, "--work-dir", "-w", help="Directorio de trabajo")
) -> None:
    """üîç Extraer artefactos forenses espec√≠ficos.
    
    Extrae y analiza artefactos forenses como registros, logs, historial de navegador,
    archivos de configuraci√≥n, etc.
    
    Ejemplos:
        forensectl analyze artifacts --case CASE-001
        forensectl analyze artifacts -c CASE-001 --type registry --type browser
    """
    try:
        # Inicializar managers
        case_manager = CaseManager(work_dir=work_dir) if work_dir else CaseManager()
        
        if not case_manager.case_exists(case_id):
            rprint(f"[red]‚ùå Caso {case_id} no encontrado[/red]")
            raise typer.Exit(1)
        
        artifact_extractor = ArtifactExtractor(case_id, case_manager=case_manager)
        
        rprint(f"[blue]üîç Extrayendo artefactos para caso: {case_id}[/blue]")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            TimeElapsedColumn(),
            console=console
        ) as progress:
            
            # Tarea de extracci√≥n
            extract_task = progress.add_task("Extrayendo artefactos...", total=100)
            
            # Ejecutar extracci√≥n
            results = artifact_extractor.extract(
                evidence_id=evidence_id,
                artifact_types=artifact_types,
                os_type=os_type,
                include_registry=include_registry,
                include_logs=include_logs,
                include_browser=include_browser,
                output_format=output_format,
                progress_callback=lambda p: progress.update(extract_task, completed=p)
            )
            
            progress.update(extract_task, completed=100)
            
            # Guardar resultados si se solicita
            if save_results:
                save_task = progress.add_task("Guardando resultados...", total=100)
                
                artifact_extractor.save_results(results)
                
                progress.update(save_task, completed=100)
        
        # Mostrar resumen
        rprint(f"[green]‚úÖ Extracci√≥n de artefactos completada[/green]")
        
        summary_table = Table(title="Resumen de Extracci√≥n de Artefactos")
        summary_table.add_column("M√©trica", style="cyan")
        summary_table.add_column("Valor", style="white")
        
        summary_table.add_row("Evidencias Procesadas", str(len(results.get("evidences", []))))
        summary_table.add_row("Tipos de Artefactos", str(len(results.get("artifact_types", []))))
        summary_table.add_row("Artefactos Extra√≠dos", str(results.get("artifacts_count", 0)))
        summary_table.add_row("Entradas de Registro", str(results.get("registry_entries", 0)))
        summary_table.add_row("Logs del Sistema", str(results.get("system_logs", 0)))
        summary_table.add_row("Historial de Navegador", str(results.get("browser_history", 0)))
        summary_table.add_row("Archivos de Configuraci√≥n", str(results.get("config_files", 0)))
        summary_table.add_row("Formato de Salida", output_format.upper())
        summary_table.add_row("Resultados Guardados", "‚úÖ S√≠" if save_results else "‚ùå No")
        
        console.print(summary_table)
        
        # Mostrar hallazgos importantes
        if results.get("suspicious_artifacts"):
            rprint("\n[bold red]üö® Artefactos Sospechosos:[/bold red]")
            for artifact in results["suspicious_artifacts"][:5]:
                rprint(f"  ‚Ä¢ {artifact['type']}: {artifact['description']}")
        
        if results.get("user_activity"):
            rprint("\n[bold blue]üë§ Actividad de Usuario Detectada:[/bold blue]")
            for activity in results["user_activity"][:5]:
                rprint(f"  ‚Ä¢ {activity['timestamp']}: {activity['action']}")
        
    except Exception as e:
        logger.error(f"Error extrayendo artefactos: {e}")
        rprint(f"[red]‚ùå Error: {e}[/red]")
        raise typer.Exit(1)


@app.command("all")
def analyze_all(
    case_id: str = typer.Option(..., "--case", "-c", help="ID del caso"),
    evidence_id: Optional[str] = typer.Option(None, "--evidence", "-e", help="ID de evidencia espec√≠fica"),
    analysis_profile: str = typer.Option("standard", "--profile", "-p", help="Perfil de an√°lisis (quick/standard/comprehensive)"),
    parallel: bool = typer.Option(True, "--parallel/--sequential", help="Ejecutar an√°lisis en paralelo"),
    output_format: str = typer.Option("json", "--format", "-f", help="Formato de salida (json/csv/text)"),
    save_results: bool = typer.Option(True, "--save/--no-save", help="Guardar resultados en el caso"),
    work_dir: Optional[Path] = typer.Option(None, "--work-dir", "-w", help="Directorio de trabajo")
) -> None:
    """üîÑ Ejecutar an√°lisis completo automatizado.
    
    Ejecuta todos los tipos de an√°lisis disponibles seg√∫n el perfil seleccionado:
    - quick: An√°lisis b√°sico y r√°pido
    - standard: An√°lisis est√°ndar completo
    - comprehensive: An√°lisis exhaustivo (puede tomar horas)
    
    Ejemplos:
        forensectl analyze all --case CASE-001
        forensectl analyze all -c CASE-001 --profile comprehensive --parallel
    """
    try:
        # Inicializar managers
        case_manager = CaseManager(work_dir=work_dir) if work_dir else CaseManager()
        
        if not case_manager.case_exists(case_id):
            rprint(f"[red]‚ùå Caso {case_id} no encontrado[/red]")
            raise typer.Exit(1)
        
        rprint(f"[blue]üîÑ Ejecutando an√°lisis completo para caso: {case_id}[/blue]")
        rprint(f"[yellow]üìã Perfil de an√°lisis: {analysis_profile}[/yellow]")
        rprint(f"[yellow]‚ö° Modo: {'Paralelo' if parallel else 'Secuencial'}[/yellow]")
        
        # Definir an√°lisis seg√∫n el perfil
        analysis_steps = {
            "quick": [
                ("memory", "An√°lisis b√°sico de memoria"),
                ("disk", "An√°lisis r√°pido de disco"),
                ("artifacts", "Extracci√≥n de artefactos b√°sicos")
            ],
            "standard": [
                ("memory", "An√°lisis completo de memoria"),
                ("disk", "An√°lisis completo de disco"),
                ("artifacts", "Extracci√≥n completa de artefactos")
            ],
            "comprehensive": [
                ("memory", "An√°lisis exhaustivo de memoria"),
                ("disk", "An√°lisis exhaustivo de disco"),
                ("artifacts", "Extracci√≥n exhaustiva de artefactos")
            ]
        }
        
        steps = analysis_steps.get(analysis_profile, analysis_steps["standard"])
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            TimeElapsedColumn(),
            console=console
        ) as progress:
            
            all_results = {}
            
            for i, (analysis_type, description) in enumerate(steps):
                task = progress.add_task(f"[{i+1}/{len(steps)}] {description}...", total=100)
                
                try:
                    if analysis_type == "memory":
                        analyzer = MemoryAnalyzer(case_id, case_manager=case_manager)
                        results = analyzer.analyze(
                            evidence_id=evidence_id,
                            profile=None,  # Auto-detect
                            plugins=None,  # Use profile defaults
                            output_format=output_format,
                            progress_callback=lambda p: progress.update(task, completed=p)
                        )
                    
                    elif analysis_type == "disk":
                        analyzer = DiskAnalyzer(case_id, case_manager=case_manager)
                        results = analyzer.analyze(
                            evidence_id=evidence_id,
                            analysis_type=analysis_profile,
                            progress_callback=lambda p: progress.update(task, completed=p)
                        )
                    
                    elif analysis_type == "artifacts":
                        extractor = ArtifactExtractor(case_id, case_manager=case_manager)
                        results = extractor.extract(
                            evidence_id=evidence_id,
                            progress_callback=lambda p: progress.update(task, completed=p)
                        )
                    
                    all_results[analysis_type] = results
                    progress.update(task, completed=100)
                    
                except Exception as e:
                    logger.error(f"Error en an√°lisis {analysis_type}: {e}")
                    progress.update(task, completed=100, description=f"‚ùå Error en {description}")
                    all_results[analysis_type] = {"error": str(e)}
            
            # Guardar resultados consolidados
            if save_results:
                save_task = progress.add_task("Consolidando y guardando resultados...", total=100)
                
                # TODO: Implementar guardado consolidado de resultados
                
                progress.update(save_task, completed=100)
        
        # Mostrar resumen consolidado
        rprint(f"[green]‚úÖ An√°lisis completo finalizado[/green]")
        
        summary_table = Table(title="Resumen de An√°lisis Completo")
        summary_table.add_column("An√°lisis", style="cyan")
        summary_table.add_column("Estado", style="white")
        summary_table.add_column("Resultados", style="green")
        
        for analysis_type, results in all_results.items():
            if "error" in results:
                status = "‚ùå Error"
                result_count = "N/A"
            else:
                status = "‚úÖ Completado"
                result_count = str(results.get("total_items", 0))
            
            summary_table.add_row(
                analysis_type.title(),
                status,
                result_count
            )
        
        console.print(summary_table)
        
        # Mostrar hallazgos cr√≠ticos consolidados
        critical_findings = []
        for analysis_type, results in all_results.items():
            if "error" not in results:
                critical_findings.extend(results.get("critical_findings", []))
        
        if critical_findings:
            rprint("\n[bold red]üö® Hallazgos Cr√≠ticos Consolidados:[/bold red]")
            for finding in critical_findings[:10]:  # Mostrar solo los primeros 10
                rprint(f"  ‚Ä¢ {finding.get('severity', 'HIGH')}: {finding.get('description', 'N/A')}")
        
    except Exception as e:
        logger.error(f"Error en an√°lisis completo: {e}")
        rprint(f"[red]‚ùå Error: {e}[/red]")
        raise typer.Exit(1)


@app.command("status")
def analysis_status(
    case_id: str = typer.Option(..., "--case", "-c", help="ID del caso"),
    work_dir: Optional[Path] = typer.Option(None, "--work-dir", "-w", help="Directorio de trabajo")
) -> None:
    """üìä Mostrar estado de an√°lisis del caso.
    
    Muestra el progreso y resultados de todos los an√°lisis ejecutados.
    """
    try:
        # Inicializar managers
        case_manager = CaseManager(work_dir=work_dir) if work_dir else CaseManager()
        
        if not case_manager.case_exists(case_id):
            rprint(f"[red]‚ùå Caso {case_id} no encontrado[/red]")
            raise typer.Exit(1)
        
        # TODO: Implementar obtenci√≥n de estado de an√°lisis
        analysis_status = case_manager.get_analysis_status(case_id)
        
        rprint(f"[blue]üìä Estado de An√°lisis - Caso: {case_id}[/blue]")
        
        # Tabla de estado general
        status_table = Table(title="Estado General")
        status_table.add_column("Tipo de An√°lisis", style="cyan")
        status_table.add_column("Estado", style="white")
        status_table.add_column("√öltima Ejecuci√≥n", style="blue")
        status_table.add_column("Resultados", style="green")
        
        for analysis in analysis_status.get("analyses", []):
            status_icon = {
                "completed": "‚úÖ",
                "running": "üîÑ",
                "failed": "‚ùå",
                "pending": "‚è≥"
            }.get(analysis.get("status"), "‚ùì")
            
            status_table.add_row(
                analysis.get("type", "N/A").title(),
                f"{status_icon} {analysis.get('status', 'N/A').title()}",
                analysis.get("last_run", "N/A"),
                str(analysis.get("result_count", 0))
            )
        
        console.print(status_table)
        
        # Estad√≠sticas generales
        stats = analysis_status.get("statistics", {})
        if stats:
            rprint("\n[bold yellow]üìà Estad√≠sticas:[/bold yellow]")
            rprint(f"  ‚Ä¢ Total de an√°lisis ejecutados: {stats.get('total_analyses', 0)}")
            rprint(f"  ‚Ä¢ An√°lisis completados: {stats.get('completed_analyses', 0)}")
            rprint(f"  ‚Ä¢ An√°lisis fallidos: {stats.get('failed_analyses', 0)}")
            rprint(f"  ‚Ä¢ Tiempo total de an√°lisis: {stats.get('total_time', 'N/A')}")
        
    except Exception as e:
        logger.error(f"Error obteniendo estado de an√°lisis: {e}")
        rprint(f"[red]‚ùå Error: {e}[/red]")
        raise typer.Exit(1)