"""CLI principal de ForenseCTL."""

import sys
from pathlib import Path
from typing import Optional

import typer
from rich.console import Console
from rich.table import Table
from rich import print as rprint

from forensectl import __version__, logger
from forensectl.core.case_manager import CaseManager
from forensectl.core.config import get_settings
from forensectl.analysis import MemoryAnalyzer, DiskAnalyzer, TimelineBuilder, YaraScanner, ArtifactExtractor
from forensectl.reports import ReportGenerator
from forensectl.cli.commands import (
    case_cmd,
    evidence_cmd,
    acquire_cmd,
    analyze_cmd,
    timeline_cmd,
    yara_cmd,
    report_cmd,
    chain_cmd,
    verify_cmd,
    retention_cmd,
    workflow_cmd
)

# Configurar consola Rich
console = Console()

# Crear aplicaci√≥n Typer principal
app = typer.Typer(
    name="forensectl",
    help="üîç ForenseCTL - Herramienta de An√°lisis Forense Automatizado",
    epilog="Para m√°s informaci√≥n: https://github.com/tu-org/forensectl",
    rich_markup_mode="rich",
    no_args_is_help=True,
    add_completion=True
)

# Registrar subcomandos
app.add_typer(case_cmd.app, name="case", help="üìÅ Gesti√≥n de casos forenses")
app.add_typer(evidence_cmd.app, name="evidence", help="üóÇÔ∏è Gesti√≥n de evidencias")
app.add_typer(acquire_cmd.app, name="acquire", help="üîç Adquisici√≥n de evidencias")
app.add_typer(analyze_cmd.app, name="analyze", help="üß† An√°lisis forense")
app.add_typer(timeline_cmd.app, name="timeline", help="‚è±Ô∏è Construcci√≥n de timeline")
app.add_typer(yara_cmd.app, name="yara", help="ü¶† Detecci√≥n con YARA")
app.add_typer(report_cmd.app, name="report", help="üìä Generaci√≥n de reportes")
app.add_typer(chain_cmd.app, name="chain", help="üîó Cadena de custodia")
app.add_typer(verify_cmd.app, name="verify", help="‚úÖ Verificaci√≥n de integridad")
app.add_typer(retention_cmd.app, name="retention", help="üóëÔ∏è Gesti√≥n de retenci√≥n")
app.add_typer(workflow_cmd.app, name="workflow", help="üîÑ Workflows automatizados")


@app.callback()
def main(
    version: bool = typer.Option(False, "--version", "-v", help="Mostrar versi√≥n"),
    verbose: bool = typer.Option(False, "--verbose", help="Modo verbose"),
    quiet: bool = typer.Option(False, "--quiet", "-q", help="Modo silencioso"),
    config_file: Optional[Path] = typer.Option(None, "--config", "-c", help="Archivo de configuraci√≥n")
) -> None:
    """ForenseCTL - Herramienta de An√°lisis Forense Automatizado.
    
    Una plataforma profesional que automatiza el ciclo completo de investigaci√≥n forense:
    adquisici√≥n ‚Üí preservaci√≥n ‚Üí an√°lisis ‚Üí timeline ‚Üí reporte.
    """
    if version:
        rprint(f"[bold blue]ForenseCTL[/bold blue] versi√≥n [green]{__version__}[/green]")
        raise typer.Exit()
    
    # Configurar logging seg√∫n opciones
    if verbose:
        logger.setLevel("DEBUG")
    elif quiet:
        logger.setLevel("ERROR")
    
    # Cargar configuraci√≥n personalizada si se especifica
    if config_file:
        if not config_file.exists():
            rprint(f"[red]‚ùå Archivo de configuraci√≥n no encontrado: {config_file}[/red]")
            raise typer.Exit(1)
        # TODO: Implementar carga de configuraci√≥n personalizada
        logger.info(f"Cargando configuraci√≥n desde: {config_file}")


@app.command("init-case")
def init_case(
    case_id: str = typer.Option(..., "--case", "-c", help="ID del caso (ej: CASE-20250812-ORG-INCIDENT)"),
    examiner: str = typer.Option(..., "--examiner", "-e", help="Nombre del examinador"),
    description: Optional[str] = typer.Option(None, "--description", "-d", help="Descripci√≥n del caso"),
    organization: Optional[str] = typer.Option(None, "--organization", "-o", help="Organizaci√≥n"),
    incident_type: Optional[str] = typer.Option(None, "--type", "-t", help="Tipo de incidente"),
    priority: str = typer.Option("medium", "--priority", "-p", help="Prioridad (low/medium/high/critical)"),
    work_dir: Optional[Path] = typer.Option(None, "--work-dir", "-w", help="Directorio de trabajo")
) -> None:
    """üÜï Inicializar un nuevo caso forense.
    
    Crea la estructura de directorios, manifiestos iniciales y cadena de custodia.
    
    Ejemplos:
        forensectl init-case --case CASE-20250812-ACME-MALWARE --examiner "John Doe"
        forensectl init-case -c CASE-001 -e "Jane Smith" -d "An√°lisis de ransomware"
    """
    try:
        settings = get_settings()
        
        # Usar directorio de trabajo personalizado o por defecto
        if work_dir:
            case_manager = CaseManager(work_dir=work_dir)
        else:
            case_manager = CaseManager()
        
        # Validar formato de case_id
        if not case_manager.validate_case_id(case_id):
            rprint(f"[red]‚ùå Formato de case_id inv√°lido: {case_id}[/red]")
            rprint("[yellow]Formato esperado: CASE-YYYYMMDD-ORG-INCIDENT[/yellow]")
            raise typer.Exit(1)
        
        # Verificar si el caso ya existe
        if case_manager.case_exists(case_id):
            rprint(f"[red]‚ùå El caso {case_id} ya existe[/red]")
            raise typer.Exit(1)
        
        # Crear caso
        case_info = {
            "case_id": case_id,
            "examiner": examiner,
            "description": description or f"Caso forense {case_id}",
            "organization": organization or settings.organization,
            "incident_type": incident_type or "unknown",
            "priority": priority
        }
        
        case_path = case_manager.create_case(**case_info)
        
        # Mostrar informaci√≥n del caso creado
        rprint(f"[green]‚úÖ Caso {case_id} creado exitosamente[/green]")
        rprint(f"[blue]üìÅ Directorio: {case_path}[/blue]")
        
        # Mostrar estructura creada
        table = Table(title="Estructura del Caso")
        table.add_column("Directorio", style="cyan")
        table.add_column("Prop√≥sito", style="white")
        
        table.add_row("evidence/", "Evidencias originales")
        table.add_row("analysis/", "Resultados de an√°lisis")
        table.add_row("reports/", "Reportes generados")
        table.add_row("manifests/", "Manifiestos y metadatos")
        table.add_row("chain/", "Cadena de custodia")
        table.add_row("temp/", "Archivos temporales")
        
        console.print(table)
        
        rprint("\n[yellow]üí° Pr√≥ximos pasos:[/yellow]")
        rprint(f"  1. Adquirir evidencias: [cyan]forensectl acquire --case {case_id}[/cyan]")
        rprint(f"  2. Analizar evidencias: [cyan]forensectl analyze --case {case_id}[/cyan]")
        rprint(f"  3. Generar reporte: [cyan]forensectl report build --case {case_id}[/cyan]")
        
    except Exception as e:
        logger.error(f"Error inicializando caso: {e}")
        rprint(f"[red]‚ùå Error: {e}[/red]")
        raise typer.Exit(1)


@app.command("list-cases")
def list_cases(
    status: Optional[str] = typer.Option(None, "--status", "-s", help="Filtrar por estado"),
    examiner: Optional[str] = typer.Option(None, "--examiner", "-e", help="Filtrar por examinador"),
    limit: int = typer.Option(20, "--limit", "-l", help="N√∫mero m√°ximo de casos a mostrar"),
    work_dir: Optional[Path] = typer.Option(None, "--work-dir", "-w", help="Directorio de trabajo")
) -> None:
    """üìã Listar casos existentes.
    
    Muestra una tabla con informaci√≥n b√°sica de los casos.
    """
    try:
        if work_dir:
            case_manager = CaseManager(work_dir=work_dir)
        else:
            case_manager = CaseManager()
        
        cases = case_manager.list_cases(status=status, examiner=examiner, limit=limit)
        
        if not cases:
            rprint("[yellow]üì≠ No se encontraron casos[/yellow]")
            return
        
        # Crear tabla
        table = Table(title=f"Casos Forenses ({len(cases)} encontrados)")
        table.add_column("Case ID", style="cyan", no_wrap=True)
        table.add_column("Examinador", style="green")
        table.add_column("Estado", style="yellow")
        table.add_column("Creado", style="blue")
        table.add_column("Descripci√≥n", style="white")
        
        for case in cases:
            table.add_row(
                case.get("case_id", "N/A"),
                case.get("examiner", "N/A"),
                case.get("status", "N/A"),
                case.get("created_at", "N/A"),
                case.get("description", "N/A")[:50] + "..." if len(case.get("description", "")) > 50 else case.get("description", "N/A")
            )
        
        console.print(table)
        
    except Exception as e:
        logger.error(f"Error listando casos: {e}")
        rprint(f"[red]‚ùå Error: {e}[/red]")
        raise typer.Exit(1)


@app.command("case-info")
def case_info(
    case_id: str = typer.Option(..., "--case", "-c", help="ID del caso"),
    work_dir: Optional[Path] = typer.Option(None, "--work-dir", "-w", help="Directorio de trabajo")
) -> None:
    """‚ÑπÔ∏è Mostrar informaci√≥n detallada de un caso.
    
    Incluye metadatos, evidencias, an√°lisis realizados y estado de la cadena de custodia.
    """
    try:
        if work_dir:
            case_manager = CaseManager(work_dir=work_dir)
        else:
            case_manager = CaseManager()
        
        if not case_manager.case_exists(case_id):
            rprint(f"[red]‚ùå Caso {case_id} no encontrado[/red]")
            raise typer.Exit(1)
        
        case_info = case_manager.get_case_info(case_id)
        
        # Informaci√≥n b√°sica
        rprint(f"[bold blue]üìã Informaci√≥n del Caso: {case_id}[/bold blue]\n")
        
        basic_table = Table(title="Informaci√≥n B√°sica")
        basic_table.add_column("Campo", style="cyan")
        basic_table.add_column("Valor", style="white")
        
        for key, value in case_info.get("basic", {}).items():
            basic_table.add_row(key.replace("_", " ").title(), str(value))
        
        console.print(basic_table)
        
        # Evidencias
        evidences = case_info.get("evidences", [])
        if evidences:
            rprint("\n[bold green]üìÅ Evidencias:[/bold green]")
            evidence_table = Table()
            evidence_table.add_column("Archivo", style="cyan")
            evidence_table.add_column("Tipo", style="yellow")
            evidence_table.add_column("Tama√±o", style="blue")
            evidence_table.add_column("Hash SHA-256", style="green")
            
            for evidence in evidences:
                evidence_table.add_row(
                    evidence.get("filename", "N/A"),
                    evidence.get("type", "N/A"),
                    evidence.get("size", "N/A"),
                    evidence.get("sha256", "N/A")[:16] + "..." if evidence.get("sha256") else "N/A"
                )
            
            console.print(evidence_table)
        
        # An√°lisis realizados
        analyses = case_info.get("analyses", [])
        if analyses:
            rprint("\n[bold yellow]üß† An√°lisis Realizados:[/bold yellow]")
            analysis_table = Table()
            analysis_table.add_column("Tipo", style="cyan")
            analysis_table.add_column("Estado", style="yellow")
            analysis_table.add_column("Fecha", style="blue")
            analysis_table.add_column("Resultados", style="green")
            
            for analysis in analyses:
                analysis_table.add_row(
                    analysis.get("type", "N/A"),
                    analysis.get("status", "N/A"),
                    analysis.get("timestamp", "N/A"),
                    str(analysis.get("results_count", 0)) + " archivos"
                )
            
            console.print(analysis_table)
        
        # Estad√≠sticas
        stats = case_info.get("statistics", {})
        if stats:
            rprint("\n[bold magenta]üìä Estad√≠sticas:[/bold magenta]")
            stats_table = Table()
            stats_table.add_column("M√©trica", style="cyan")
            stats_table.add_column("Valor", style="white")
            
            for key, value in stats.items():
                stats_table.add_row(key.replace("_", " ").title(), str(value))
            
            console.print(stats_table)
        
    except Exception as e:
        logger.error(f"Error obteniendo informaci√≥n del caso: {e}")
        rprint(f"[red]‚ùå Error: {e}[/red]")
        raise typer.Exit(1)


@app.command("status")
def status(
    case_id: Optional[str] = typer.Option(None, "--case", "-c", help="ID del caso espec√≠fico"),
    work_dir: Optional[Path] = typer.Option(None, "--work-dir", "-w", help="Directorio de trabajo")
) -> None:
    """üìä Mostrar estado general del sistema.
    
    Incluye informaci√≥n sobre casos activos, recursos del sistema y servicios.
    """
    try:
        settings = get_settings()
        
        rprint("[bold blue]üîç Estado del Sistema ForenseCTL[/bold blue]\n")
        
        # Informaci√≥n del sistema
        system_table = Table(title="Informaci√≥n del Sistema")
        system_table.add_column("Componente", style="cyan")
        system_table.add_column("Estado", style="green")
        system_table.add_column("Informaci√≥n", style="white")
        
        system_table.add_row("ForenseCTL", "‚úÖ Activo", f"v{__version__}")
        system_table.add_row("Python", "‚úÖ Activo", f"{sys.version.split()[0]}")
        system_table.add_row("Directorio de Trabajo", "‚úÖ Configurado", str(settings.work_dir))
        system_table.add_row("Organizaci√≥n", "‚úÖ Configurado", settings.organization)
        
        console.print(system_table)
        
        # Casos activos
        if work_dir:
            case_manager = CaseManager(work_dir=work_dir)
        else:
            case_manager = CaseManager()
        
        if case_id:
            # Estado de caso espec√≠fico
            if case_manager.case_exists(case_id):
                rprint(f"\n[bold green]üìã Estado del Caso: {case_id}[/bold green]")
                # TODO: Implementar estado detallado del caso
                rprint(f"[green]‚úÖ Caso {case_id} encontrado y accesible[/green]")
            else:
                rprint(f"[red]‚ùå Caso {case_id} no encontrado[/red]")
        else:
            # Resumen de todos los casos
            cases = case_manager.list_cases(limit=5)
            if cases:
                rprint(f"\n[bold yellow]üìã Casos Recientes ({len(cases)} de √∫ltimos 5):[/bold yellow]")
                for case in cases:
                    status_icon = "üü¢" if case.get("status") == "active" else "üü°"
                    rprint(f"  {status_icon} {case.get('case_id')} - {case.get('examiner')}")
            else:
                rprint("\n[yellow]üì≠ No hay casos activos[/yellow]")
        
        # TODO: Agregar estado de servicios (Docker, bases de datos, etc.)
        
    except Exception as e:
        logger.error(f"Error obteniendo estado: {e}")
        rprint(f"[red]‚ùå Error: {e}[/red]")
        raise typer.Exit(1)


@app.command("self-check")
def self_check() -> None:
    """üîß Verificar configuraci√≥n y dependencias del sistema.
    
    Ejecuta una serie de verificaciones para asegurar que ForenseCTL
    est√° correctamente configurado y todas las dependencias est√°n disponibles.
    """
    try:
        rprint("[bold blue]üîß Verificaci√≥n del Sistema ForenseCTL[/bold blue]\n")
        
        checks = []
        
        # Verificar configuraci√≥n
        try:
            settings = get_settings()
            checks.append(("Configuraci√≥n", True, "Cargada correctamente"))
        except Exception as e:
            checks.append(("Configuraci√≥n", False, f"Error: {e}"))
        
        # Verificar directorio de trabajo
        try:
            work_dir = Path(settings.work_dir)
            if work_dir.exists() and work_dir.is_dir():
                checks.append(("Directorio de Trabajo", True, str(work_dir)))
            else:
                checks.append(("Directorio de Trabajo", False, f"No existe: {work_dir}"))
        except Exception as e:
            checks.append(("Directorio de Trabajo", False, f"Error: {e}"))
        
        # Verificar herramientas forenses
        tools = [
            ("Volatility3", "vol"),
            ("The Sleuth Kit", "fls"),
            ("plaso", "log2timeline.py"),
            ("YARA", "yara")
        ]
        
        for tool_name, command in tools:
            try:
                import subprocess
                result = subprocess.run([command, "--version"], 
                                      capture_output=True, timeout=10)
                if result.returncode == 0:
                    checks.append((tool_name, True, "Disponible"))
                else:
                    checks.append((tool_name, False, "No responde"))
            except (subprocess.TimeoutExpired, FileNotFoundError):
                checks.append((tool_name, False, "No encontrado"))
            except Exception as e:
                checks.append((tool_name, False, f"Error: {e}"))
        
        # Mostrar resultados
        check_table = Table(title="Resultados de Verificaci√≥n")
        check_table.add_column("Componente", style="cyan")
        check_table.add_column("Estado", style="white")
        check_table.add_column("Detalles", style="white")
        
        all_passed = True
        for component, passed, details in checks:
            status = "‚úÖ OK" if passed else "‚ùå FALLO"
            status_style = "green" if passed else "red"
            check_table.add_row(component, f"[{status_style}]{status}[/{status_style}]", details)
            if not passed:
                all_passed = False
        
        console.print(check_table)
        
        if all_passed:
            rprint("\n[bold green]‚úÖ Todas las verificaciones pasaron correctamente[/bold green]")
            rprint("[green]üöÄ ForenseCTL est√° listo para usar[/green]")
        else:
            rprint("\n[bold red]‚ùå Algunas verificaciones fallaron[/bold red]")
            rprint("[yellow]üí° Revisar la documentaci√≥n de instalaci√≥n[/yellow]")
            raise typer.Exit(1)
        
    except Exception as e:
        logger.error(f"Error en verificaci√≥n del sistema: {e}")
        rprint(f"[red]‚ùå Error: {e}[/red]")
        raise typer.Exit(1)


if __name__ == "__main__":
    app()