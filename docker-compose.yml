version: '3.8'

services:
  # Servicio principal de análisis forense
  forensectl:
    build:
      context: .
      dockerfile: docker/Dockerfile.forensectl
    container_name: forensectl-main
    volumes:
      - ./cases:/app/cases
      - ./evidence:/app/evidence:ro
      - ./analysis:/app/analysis
      - ./reports:/app/reports
      - ./rules:/app/rules:ro
      - ./data:/app/data:ro
    environment:
      - FORENSECTL_ENV=docker
      - FORENSECTL_LOG_LEVEL=INFO
      - FORENSECTL_CASE_DIR=/app/cases
      - FORENSECTL_EVIDENCE_DIR=/app/evidence
      - FORENSECTL_ANALYSIS_DIR=/app/analysis
      - FORENSECTL_REPORTS_DIR=/app/reports
    networks:
      - forensics-net
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  # Volatility3 para análisis de memoria
  volatility:
    build:
      context: .
      dockerfile: docker/Dockerfile.volatility
    container_name: volatility-service
    volumes:
      - ./evidence:/evidence:ro
      - ./analysis:/analysis
      - ./data/volatility-symbols:/symbols:ro
    environment:
      - VOLATILITY_SYMBOLS_PATH=/symbols
    networks:
      - forensics-net
    restart: unless-stopped

  # The Sleuth Kit para análisis de disco
  sleuthkit:
    build:
      context: .
      dockerfile: docker/Dockerfile.sleuthkit
    container_name: sleuthkit-service
    volumes:
      - ./evidence:/evidence:ro
      - ./analysis:/analysis
    networks:
      - forensics-net
    restart: unless-stopped

  # plaso para timeline forense
  plaso:
    build:
      context: .
      dockerfile: docker/Dockerfile.plaso
    container_name: plaso-service
    volumes:
      - ./evidence:/evidence:ro
      - ./analysis:/analysis
      - ./data/plaso-filters:/filters:ro
    environment:
      - PLASO_WORKERS=4
    networks:
      - forensics-net
    restart: unless-stopped

  # YARA para detección de malware
  yara-scanner:
    build:
      context: .
      dockerfile: docker/Dockerfile.yara
    container_name: yara-scanner
    volumes:
      - ./evidence:/evidence:ro
      - ./analysis:/analysis
      - ./rules/yara:/rules:ro
    environment:
      - YARA_RULES_PATH=/rules
    networks:
      - forensics-net
    restart: unless-stopped

  # Redis para colas de trabajo
  redis:
    image: redis:7-alpine
    container_name: forensics-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - forensics-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL para metadatos
  postgres:
    image: postgres:15-alpine
    container_name: forensics-postgres
    environment:
      - POSTGRES_DB=forensics
      - POSTGRES_USER=forensics
      - POSTGRES_PASSWORD=forensics_password_change_me
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - forensics-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U forensics -d forensics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery worker para procesamiento asíncrono
  celery-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.forensectl
    container_name: celery-worker
    command: celery -A forensectl.worker worker --loglevel=info --concurrency=2
    volumes:
      - ./cases:/app/cases
      - ./evidence:/app/evidence:ro
      - ./analysis:/app/analysis
      - ./reports:/app/reports
      - ./rules:/app/rules:ro
    environment:
      - FORENSECTL_ENV=docker
      - FORENSECTL_LOG_LEVEL=INFO
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    networks:
      - forensics-net
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  # Flower para monitoreo de Celery
  flower:
    build:
      context: .
      dockerfile: docker/Dockerfile.forensectl
    container_name: celery-flower
    command: celery -A forensectl.worker flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    networks:
      - forensics-net
    depends_on:
      - redis
    restart: unless-stopped

  # MinIO para almacenamiento de evidencias (opcional)
  minio:
    image: minio/minio:latest
    container_name: forensics-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=forensics
      - MINIO_ROOT_PASSWORD=forensics_minio_password_change_me
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - forensics-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana para dashboards (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: forensics-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=forensics_grafana_password_change_me
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - forensics-net
    restart: unless-stopped

  # Nginx para proxy reverso y servir reportes
  nginx:
    image: nginx:alpine
    container_name: forensics-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./reports:/usr/share/nginx/html/reports:ro
      - ./docs/site:/usr/share/nginx/html/docs:ro
    networks:
      - forensics-net
    depends_on:
      - grafana
      - flower
    restart: unless-stopped

  # Jupyter para análisis interactivo (desarrollo)
  jupyter:
    build:
      context: .
      dockerfile: docker/Dockerfile.jupyter
    container_name: forensics-jupyter
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./evidence:/home/jovyan/evidence:ro
      - ./analysis:/home/jovyan/analysis
      - ./data:/home/jovyan/data:ro
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=forensics_jupyter_token_change_me
    networks:
      - forensics-net
    restart: unless-stopped
    profiles:
      - dev

networks:
  forensics-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  minio-data:
    driver: local
  grafana-data:
    driver: local

# Configuración para desarrollo
# Para usar: docker-compose --profile dev up
# Incluye servicios adicionales como Jupyter